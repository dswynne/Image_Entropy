        /*// Generating N p&q bitstrings from the 1D intensity vector
        bitstrings bitstrings = gen_bitstrings(allpix);

        // (NOTE) I think we will have to do all of the mpz_t type operations inside of main and not be able to pass through functions.
        // This probably means that we will not do too many operations on the mpz_t once it is in that form.
        // Might just want to keep the randomization strictly image processing based

        // Picking a random bitstring from the struct of vector strings for p&q
        int numPStrings = bitstrings.p.size();
        int numQStrings = bitstrings.q.size();
        Point pq = getPQIndices(numPStrings, numQStrings);
        int pIdx = pq.x;
        int qIdx = pq.y;
        const char* cstringsP;
        const char* cstringsQ;
        cstringsP = const_cast<char*>(bitstrings.p[pIdx].c_str());
        cstringsQ = const_cast<char*>(bitstrings.q[qIdx].c_str());

        // Converting bitstrings back to ints
        mpz_t pInt;
        mpz_t qInt;
        mpz_init(pInt);
        mpz_init(qInt);
        mpz_set_str(pInt, cstringsP, 10);
        mpz_set_str(qInt, cstringsQ, 10);

        // Find a the next prime greater than pInt and qInt
        mpz_t pPrime;
        mpz_t qPrime;
        mpz_init(pInt);
        mpz_init(qInt);
        gmp_randstate_t pState;
        gmp_randstate_t qState;
        gmp_randinit_mt(pState);
        gmp_randinit_mt(qState);
        mpz_next_prime_candidate(pPrime, pInt, pState);
        mpz_next_prime_candidate(qPrime, qInt, qState);*/

        /* CODE TO TEST RANDOMNESS WILL BREAK OUT LATER
        // Finding the Metric Entropy of a single p&q
        // Values between 0 & 1. Where 1 means equally distributed random string.
        string stringP = bitstrings.p[pIdx];
        string stringQ = bitstrings.q[qIdx];
        metric_ent metric_ent = test_single_string_entropy(stringP, stringQ); //(NEED TO) Check outputs
        cout << "Round: " << i << endl;
        cout << "Metric Entropy for p = " << metric_ent.p << endl;
        cout << "Metric Entropy for q = " << metric_ent.q << endl;

        /* END OF CODE TO TEST RANDOMNESS */